/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface RouterInterface extends Interface {
    getFunction(nameOrSignature: "amm" | "baseToken" | "executeMarketOrder" | "getOrderBookDepth" | "getQuote" | "getSpread" | "orderBook" | "quoteToken"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MarketOrderExecuted"): EventFragment;

    encodeFunctionData(functionFragment: 'amm', values?: undefined): string;
encodeFunctionData(functionFragment: 'baseToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'executeMarketOrder', values: [BigNumberish, boolean, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getOrderBookDepth', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'getQuote', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'getSpread', values?: undefined): string;
encodeFunctionData(functionFragment: 'orderBook', values?: undefined): string;
encodeFunctionData(functionFragment: 'quoteToken', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'amm', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'baseToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeMarketOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getOrderBookDepth', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getQuote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSpread', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orderBook', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quoteToken', data: BytesLike): Result;
  }

  
    export namespace MarketOrderExecutedEvent {
      export type InputTuple = [trader: AddressLike, buyBase: boolean, amountIn: BigNumberish, amountOut: BigNumberish];
      export type OutputTuple = [trader: string, buyBase: boolean, amountIn: bigint, amountOut: bigint];
      export interface OutputObject {trader: string, buyBase: boolean, amountIn: bigint, amountOut: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Router extends BaseContract {
    
    connect(runner?: ContractRunner | null): Router;
    waitForDeployment(): Promise<this>;

    interface: RouterInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    amm: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    baseToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    executeMarketOrder: TypedContractMethod<
      [amountIn: BigNumberish, buyBase: boolean, minAmountOut: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    getOrderBookDepth: TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [[bigint, bigint] & {totalAmount: bigint, orderCount: bigint }],
      'view'
    >
    

    
    getQuote: TypedContractMethod<
      [amount: BigNumberish, buyBase: boolean, ],
      [[bigint, bigint, boolean] & {orderBookPrice: bigint, ammPrice: bigint, useOrderBook: boolean }],
      'view'
    >
    

    
    getSpread: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    orderBook: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    quoteToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'amm'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'baseToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'executeMarketOrder'): TypedContractMethod<
      [amountIn: BigNumberish, buyBase: boolean, minAmountOut: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getOrderBookDepth'): TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [[bigint, bigint] & {totalAmount: bigint, orderCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getQuote'): TypedContractMethod<
      [amount: BigNumberish, buyBase: boolean, ],
      [[bigint, bigint, boolean] & {orderBookPrice: bigint, ammPrice: bigint, useOrderBook: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getSpread'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'orderBook'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'quoteToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'MarketOrderExecuted'): TypedContractEvent<MarketOrderExecutedEvent.InputTuple, MarketOrderExecutedEvent.OutputTuple, MarketOrderExecutedEvent.OutputObject>;

    filters: {
      
      'MarketOrderExecuted(address,bool,uint256,uint256)': TypedContractEvent<MarketOrderExecutedEvent.InputTuple, MarketOrderExecutedEvent.OutputTuple, MarketOrderExecutedEvent.OutputObject>;
      MarketOrderExecuted: TypedContractEvent<MarketOrderExecutedEvent.InputTuple, MarketOrderExecutedEvent.OutputTuple, MarketOrderExecutedEvent.OutputObject>;
    
    };
  }