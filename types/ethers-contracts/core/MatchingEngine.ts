/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MatchingEngineInterface extends Interface {
    getFunction(nameOrSignature: "batchMatch" | "matchOrders" | "orderBook"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;

    encodeFunctionData(functionFragment: 'batchMatch', values: [BigNumberish[], BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'matchOrders', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'orderBook', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'batchMatch', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'matchOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orderBook', data: BytesLike): Result;
  }

  
    export namespace OrdersMatchedEvent {
      export type InputTuple = [buyOrderId: BigNumberish, sellOrderId: BigNumberish, price: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [buyOrderId: bigint, sellOrderId: bigint, price: bigint, amount: bigint];
      export interface OutputObject {buyOrderId: bigint, sellOrderId: bigint, price: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MatchingEngine extends BaseContract {
    
    connect(runner?: ContractRunner | null): MatchingEngine;
    waitForDeployment(): Promise<this>;

    interface: MatchingEngineInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    batchMatch: TypedContractMethod<
      [buyPrices: BigNumberish[], sellPrices: BigNumberish[], ],
      [bigint],
      'nonpayable'
    >
    

    
    matchOrders: TypedContractMethod<
      [buyPrice: BigNumberish, sellPrice: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    orderBook: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'batchMatch'): TypedContractMethod<
      [buyPrices: BigNumberish[], sellPrices: BigNumberish[], ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'matchOrders'): TypedContractMethod<
      [buyPrice: BigNumberish, sellPrice: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'orderBook'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'OrdersMatched'): TypedContractEvent<OrdersMatchedEvent.InputTuple, OrdersMatchedEvent.OutputTuple, OrdersMatchedEvent.OutputObject>;

    filters: {
      
      'OrdersMatched(uint256,uint256,uint256,uint256)': TypedContractEvent<OrdersMatchedEvent.InputTuple, OrdersMatchedEvent.OutputTuple, OrdersMatchedEvent.OutputObject>;
      OrdersMatched: TypedContractEvent<OrdersMatchedEvent.InputTuple, OrdersMatchedEvent.OutputTuple, OrdersMatchedEvent.OutputObject>;
    
    };
  }