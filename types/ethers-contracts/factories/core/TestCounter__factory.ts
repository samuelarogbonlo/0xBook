/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { TestCounter, TestCounterInterface } from "../../core/TestCounter.js";

  const _abi = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "concurrentEnabled",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decrement",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getCount",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "increment",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "incrementBy",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561001057600080fd5b5061001961001e565b61013b565b600060001960405161002f90610115565b9182526020820152604001604051809103906000f0801561004d5760015b61005d576000805460ff19169055565b80600060016101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060019054906101000a90046001600160a01b03166001600160a01b0316636d4ce63c6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156100f3575060408051601f3d908101601f191682019092526100f091810190610122565b60015b610104576000805460ff1916905550565b506000805460ff1916600117905550565b6105498061063683390190565b60006020828403121561013457600080fd5b5051919050565b6104ec8061014a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806303a63b631461005c57806303df179c1461007e5780632baeceb714610093578063a87d942c1461009b578063d09de08a146100b1575b600080fd5b6000546100699060ff1681565b60405190151581526020015b60405180910390f35b61009161008c366004610419565b6100b9565b005b61009161019a565b6100a36102ba565b604051908152602001610075565b610091610348565b60005460ff161561018057600054604051630801f16960e11b8152600481018390526101009091046001600160a01b031690631003e2d2906024016020604051808303816000875af1158015610113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101379190610432565b61017d5760405162461bcd60e51b815260206004820152601260248201527118dbdd5b9d195c881859190819985a5b195960721b60448201526064015b60405180910390fd5b50565b80600160008282546101929190610471565b909155505050565b60005460ff161561025b576000546040516313f72c5360e11b8152600160048201526101009091046001600160a01b0316906327ee58a6906024016020604051808303816000875af11580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102189190610432565b6102595760405162461bcd60e51b815260206004820152601260248201527118dbdd5b9d195c881cdd588819985a5b195960721b6044820152606401610174565b565b6001805410156102a15760405162461bcd60e51b8152602060048201526011602482015270636f756e74657220756e646572666c6f7760781b6044820152606401610174565b60018060008282546102b3919061048a565b9091555050565b6000805460ff166102cc575060015490565b600060019054906101000a90046001600160a01b03166001600160a01b0316636d4ce63c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610343919061049d565b905090565b60005460ff161561040757600054604051630801f16960e11b8152600160048201526101009091046001600160a01b031690631003e2d2906024016020604051808303816000875af11580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c69190610432565b6102595760405162461bcd60e51b815260206004820152601260248201527118dbdd5b9d195c881859190819985a5b195960721b6044820152606401610174565b60018060008282546102b39190610471565b60006020828403121561042b57600080fd5b5035919050565b60006020828403121561044457600080fd5b8151801515811461045457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104845761048461045b565b92915050565b818103818111156104845761048461045b565b6000602082840312156104af57600080fd5b505191905056fea264697066735822122065bc40057315aa3ccc89946c0a7a12a56478fa60e2cbf3e49a6451f062788a8e64736f6c63430008130033608060405234801561001057600080fd5b5060405161054938038061054983398101604081905261002f916100d9565b604051602481018390526044810182905260009060859060640160408051601f198184030181529181526020820180516001600160e01b0316630719126760e21b1790525161007e91906100fd565b6000604051808303816000865af19150503d80600081146100bb576040519150601f19603f3d011682016040523d82523d6000602084013e6100c0565b606091505b50509050806100d1576100d161012c565b505050610142565b600080604083850312156100ec57600080fd5b505080516020909101519092909150565b6000825160005b8181101561011e5760208186018101518583015201610104565b506000920191825250919050565b634e487b7160e01b600052600160045260246000fd5b6103f8806101516000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631003e2d21461006757806327ee58a61461008f5780636ac5db19146100a25780636d4ce63c146100b85780637d7b0099146100c0578063f8897945146100e0575b600080fd5b61007a610075366004610361565b6100e8565b60405190151581526020015b60405180910390f35b61007a61009d366004610361565b61018a565b6100aa6101e0565b604051908152602001610086565b6100aa610279565b6100c8608581565b6040516001600160a01b039091168152602001610086565b6100aa610326565b60008060856001600160a01b03168360405160240161010991815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316630801f16960e11b1790525161013e919061037a565b6000604051808303816000865af19150503d806000811461017b576040519150601f19603f3d011682016040523d82523d6000602084013e610180565b606091505b5090949350505050565b60008060856001600160a01b0316836040516024016101ab91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166313f72c5360e11b1790525161013e919061037a565b60408051600481526024810182526020810180516001600160e01b0316636ac5db1960e01b1790529051600091829160859161021b9161037a565b600060405180830381855afa9150503d8060008114610256576040519150601f19603f3d011682016040523d82523d6000602084013e61025b565b606091505b509150508080602001905181019061027391906103a9565b91505090565b60408051600481526024810182526020810180516001600160e01b0316631b53398f60e21b1790529051600091829182916085916102b7919061037a565b600060405180830381855afa9150503d80600081146102f2576040519150601f19603f3d011682016040523d82523d6000602084013e6102f7565b606091505b5091509150811561031d578080602001905181019061031691906103a9565b9250505090565b60009250505090565b60408051600481526024810182526020810180516001600160e01b031663f889794560e01b1790529051600091829160859161021b9161037a565b60006020828403121561037357600080fd5b5035919050565b6000825160005b8181101561039b5760208186018101518583015201610381565b506000920191825250919050565b6000602082840312156103bb57600080fd5b505191905056fea264697066735822122007737fc0449df8ccca504f1f30b13b8940bb442b42bbdd2277b42a5472a2192164736f6c63430008130033";

  
      type TestCounterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: TestCounterConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class TestCounter__factory extends ContractFactory {
    
      constructor(...args: TestCounterConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<TestCounter & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): TestCounter__factory {
      return super.connect(runner) as TestCounter__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): TestCounterInterface {
      return new Interface(_abi) as TestCounterInterface;
    }
    
    override attach(address: string | Addressable): TestCounter {
      return super.attach(address) as TestCounter;
    }
  static connect(address: string, runner?: ContractRunner | null): TestCounter {
      return new Contract(address, _abi, runner) as unknown as TestCounter;
    }
  }

  
  