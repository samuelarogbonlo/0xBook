/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface OrderBookInterface extends Interface {
    getFunction(nameOrSignature: "baseDecimals" | "baseToken" | "buyOrdersByPrice" | "cancelOrder" | "countersUseConcurrent" | "getBestAsk" | "getBestBid" | "getDepthAtPrice" | "getOrdersByPrice" | "getSpread" | "getTotalOrdersPlaced" | "getTotalTrades" | "getTotalVolume" | "getUserOrders" | "matchOrders" | "nextOrderId" | "orders" | "placeOrder" | "quoteDecimals" | "quoteToken" | "sellOrdersByPrice" | "userOrders"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OrderCancelled" | "OrderMatched" | "OrderPlaced"): EventFragment;

    encodeFunctionData(functionFragment: 'baseDecimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'baseToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'buyOrdersByPrice', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'cancelOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'countersUseConcurrent', values?: undefined): string;
encodeFunctionData(functionFragment: 'getBestAsk', values?: undefined): string;
encodeFunctionData(functionFragment: 'getBestBid', values?: undefined): string;
encodeFunctionData(functionFragment: 'getDepthAtPrice', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'getOrdersByPrice', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'getSpread', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTotalOrdersPlaced', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTotalTrades', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTotalVolume', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserOrders', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'matchOrders', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'nextOrderId', values?: undefined): string;
encodeFunctionData(functionFragment: 'orders', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'placeOrder', values: [BigNumberish, BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'quoteDecimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'quoteToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'sellOrdersByPrice', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'userOrders', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'baseDecimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'baseToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buyOrdersByPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'countersUseConcurrent', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBestAsk', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBestBid', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getDepthAtPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getOrdersByPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSpread', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalOrdersPlaced', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalTrades', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalVolume', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'matchOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextOrderId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'placeOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quoteDecimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quoteToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'sellOrdersByPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userOrders', data: BytesLike): Result;
  }

  
    export namespace OrderCancelledEvent {
      export type InputTuple = [orderId: BigNumberish, trader: AddressLike];
      export type OutputTuple = [orderId: bigint, trader: string];
      export interface OutputObject {orderId: bigint, trader: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderMatchedEvent {
      export type InputTuple = [buyOrderId: BigNumberish, sellOrderId: BigNumberish, price: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [buyOrderId: bigint, sellOrderId: bigint, price: bigint, amount: bigint];
      export interface OutputObject {buyOrderId: bigint, sellOrderId: bigint, price: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderPlacedEvent {
      export type InputTuple = [orderId: BigNumberish, trader: AddressLike, price: BigNumberish, amount: BigNumberish, isBuy: boolean];
      export type OutputTuple = [orderId: bigint, trader: string, price: bigint, amount: bigint, isBuy: boolean];
      export interface OutputObject {orderId: bigint, trader: string, price: bigint, amount: bigint, isBuy: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface OrderBook extends BaseContract {
    
    connect(runner?: ContractRunner | null): OrderBook;
    waitForDeployment(): Promise<this>;

    interface: OrderBookInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    baseDecimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    baseToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    buyOrdersByPrice: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    cancelOrder: TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    countersUseConcurrent: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    getBestAsk: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getBestBid: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getDepthAtPrice: TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [[bigint, bigint] & {totalAmount: bigint, orderCount: bigint }],
      'view'
    >
    

    
    getOrdersByPrice: TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [bigint[]],
      'view'
    >
    

    
    getSpread: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getTotalOrdersPlaced: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getTotalTrades: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getTotalVolume: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getUserOrders: TypedContractMethod<
      [user: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    matchOrders: TypedContractMethod<
      [buyPrice: BigNumberish, sellPrice: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    nextOrderId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    orders: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, boolean, boolean] & {trader: string, price: bigint, amount: bigint, filled: bigint, timestamp: bigint, isBuy: boolean, active: boolean }],
      'view'
    >
    

    
    placeOrder: TypedContractMethod<
      [price: BigNumberish, amount: BigNumberish, isBuy: boolean, ],
      [bigint],
      'nonpayable'
    >
    

    
    quoteDecimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    quoteToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    sellOrdersByPrice: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    userOrders: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'baseDecimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'baseToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'buyOrdersByPrice'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelOrder'): TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'countersUseConcurrent'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'getBestAsk'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getBestBid'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getDepthAtPrice'): TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [[bigint, bigint] & {totalAmount: bigint, orderCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getOrdersByPrice'): TypedContractMethod<
      [price: BigNumberish, isBuy: boolean, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'getSpread'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalOrdersPlaced'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalTrades'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalVolume'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getUserOrders'): TypedContractMethod<
      [user: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'matchOrders'): TypedContractMethod<
      [buyPrice: BigNumberish, sellPrice: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'nextOrderId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'orders'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, boolean, boolean] & {trader: string, price: bigint, amount: bigint, filled: bigint, timestamp: bigint, isBuy: boolean, active: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'placeOrder'): TypedContractMethod<
      [price: BigNumberish, amount: BigNumberish, isBuy: boolean, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'quoteDecimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'quoteToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'sellOrdersByPrice'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'userOrders'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'OrderCancelled'): TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
getEvent(key: 'OrderMatched'): TypedContractEvent<OrderMatchedEvent.InputTuple, OrderMatchedEvent.OutputTuple, OrderMatchedEvent.OutputObject>;
getEvent(key: 'OrderPlaced'): TypedContractEvent<OrderPlacedEvent.InputTuple, OrderPlacedEvent.OutputTuple, OrderPlacedEvent.OutputObject>;

    filters: {
      
      'OrderCancelled(uint256,address)': TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
      OrderCancelled: TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
    

      'OrderMatched(uint256,uint256,uint256,uint256)': TypedContractEvent<OrderMatchedEvent.InputTuple, OrderMatchedEvent.OutputTuple, OrderMatchedEvent.OutputObject>;
      OrderMatched: TypedContractEvent<OrderMatchedEvent.InputTuple, OrderMatchedEvent.OutputTuple, OrderMatchedEvent.OutputObject>;
    

      'OrderPlaced(uint256,address,uint256,uint256,bool)': TypedContractEvent<OrderPlacedEvent.InputTuple, OrderPlacedEvent.OutputTuple, OrderPlacedEvent.OutputObject>;
      OrderPlaced: TypedContractEvent<OrderPlacedEvent.InputTuple, OrderPlacedEvent.OutputTuple, OrderPlacedEvent.OutputObject>;
    
    };
  }