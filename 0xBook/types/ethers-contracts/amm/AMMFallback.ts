/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface AMMFallbackInterface extends Interface {
    getFunction(nameOrSignature: "addLiquidity" | "getAmountOut" | "getQuote" | "liquidity" | "removeLiquidity" | "reserve0" | "reserve1" | "swap" | "token0" | "token1" | "totalLiquidity"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "LiquidityAdded" | "LiquidityRemoved" | "Swap"): EventFragment;

    encodeFunctionData(functionFragment: 'addLiquidity', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAmountOut', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getQuote', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'liquidity', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'removeLiquidity', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'reserve0', values?: undefined): string;
encodeFunctionData(functionFragment: 'reserve1', values?: undefined): string;
encodeFunctionData(functionFragment: 'swap', values: [BigNumberish, boolean, BigNumberish]): string;
encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalLiquidity', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAmountOut', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getQuote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'liquidity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'reserve0', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'reserve1', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalLiquidity', data: BytesLike): Result;
  }

  
    export namespace LiquidityAddedEvent {
      export type InputTuple = [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish, liquidityMinted: BigNumberish];
      export type OutputTuple = [provider: string, amount0: bigint, amount1: bigint, liquidityMinted: bigint];
      export interface OutputObject {provider: string, amount0: bigint, amount1: bigint, liquidityMinted: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LiquidityRemovedEvent {
      export type InputTuple = [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish, liquidityBurned: BigNumberish];
      export type OutputTuple = [provider: string, amount0: bigint, amount1: bigint, liquidityBurned: bigint];
      export interface OutputObject {provider: string, amount0: bigint, amount1: bigint, liquidityBurned: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SwapEvent {
      export type InputTuple = [trader: AddressLike, amountIn: BigNumberish, amountOut: BigNumberish, token0ToToken1: boolean];
      export type OutputTuple = [trader: string, amountIn: bigint, amountOut: bigint, token0ToToken1: boolean];
      export interface OutputObject {trader: string, amountIn: bigint, amountOut: bigint, token0ToToken1: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface AMMFallback extends BaseContract {
    
    connect(runner?: ContractRunner | null): AMMFallback;
    waitForDeployment(): Promise<this>;

    interface: AMMFallbackInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addLiquidity: TypedContractMethod<
      [amount0: BigNumberish, amount1: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    getAmountOut: TypedContractMethod<
      [amountIn: BigNumberish, reserveIn: BigNumberish, reserveOut: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getQuote: TypedContractMethod<
      [amountIn: BigNumberish, token0ToToken1: boolean, ],
      [bigint],
      'view'
    >
    

    
    liquidity: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    removeLiquidity: TypedContractMethod<
      [liquidityAmount: BigNumberish, ],
      [[bigint, bigint] & {amount0: bigint, amount1: bigint }],
      'nonpayable'
    >
    

    
    reserve0: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    reserve1: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    swap: TypedContractMethod<
      [amountIn: BigNumberish, token0ToToken1: boolean, minAmountOut: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    token0: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    token1: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalLiquidity: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addLiquidity'): TypedContractMethod<
      [amount0: BigNumberish, amount1: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAmountOut'): TypedContractMethod<
      [amountIn: BigNumberish, reserveIn: BigNumberish, reserveOut: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getQuote'): TypedContractMethod<
      [amountIn: BigNumberish, token0ToToken1: boolean, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'liquidity'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'removeLiquidity'): TypedContractMethod<
      [liquidityAmount: BigNumberish, ],
      [[bigint, bigint] & {amount0: bigint, amount1: bigint }],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'reserve0'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'reserve1'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'swap'): TypedContractMethod<
      [amountIn: BigNumberish, token0ToToken1: boolean, minAmountOut: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'token0'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'token1'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalLiquidity'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;

    getEvent(key: 'LiquidityAdded'): TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
getEvent(key: 'LiquidityRemoved'): TypedContractEvent<LiquidityRemovedEvent.InputTuple, LiquidityRemovedEvent.OutputTuple, LiquidityRemovedEvent.OutputObject>;
getEvent(key: 'Swap'): TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;

    filters: {
      
      'LiquidityAdded(address,uint256,uint256,uint256)': TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
      LiquidityAdded: TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
    

      'LiquidityRemoved(address,uint256,uint256,uint256)': TypedContractEvent<LiquidityRemovedEvent.InputTuple, LiquidityRemovedEvent.OutputTuple, LiquidityRemovedEvent.OutputObject>;
      LiquidityRemoved: TypedContractEvent<LiquidityRemovedEvent.InputTuple, LiquidityRemovedEvent.OutputTuple, LiquidityRemovedEvent.OutputObject>;
    

      'Swap(address,uint256,uint256,bool)': TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;
      Swap: TypedContractEvent<SwapEvent.InputTuple, SwapEvent.OutputTuple, SwapEvent.OutputObject>;
    
    };
  }