/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'AMMFallback', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.AMMFallback__factory>
getContractFactory(name: 'MatchingEngine', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MatchingEngine__factory>
getContractFactory(name: 'OrderBook', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.OrderBook__factory>
getContractFactory(name: 'Router', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Router__factory>
getContractFactory(name: 'TestCounter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TestCounter__factory>
getContractFactory(name: 'IOrderBook', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IOrderBook__factory>
getContractFactory(name: 'MockERC20', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockERC20__factory>
getContractFactory(name: 'MockUSDC', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockUSDC__factory>
getContractFactory(name: 'MockWETH', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockWETH__factory>

  getContractAt(name: 'AMMFallback', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.AMMFallback>
getContractAt(name: 'MatchingEngine', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MatchingEngine>
getContractAt(name: 'OrderBook', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.OrderBook>
getContractAt(name: 'Router', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Router>
getContractAt(name: 'TestCounter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TestCounter>
getContractAt(name: 'IOrderBook', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IOrderBook>
getContractAt(name: 'MockERC20', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockERC20>
getContractAt(name: 'MockUSDC', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockUSDC>
getContractAt(name: 'MockWETH', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockWETH>

  deployContract(name: 'AMMFallback', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.AMMFallback>
deployContract(name: 'MatchingEngine', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MatchingEngine>
deployContract(name: 'OrderBook', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.OrderBook>
deployContract(name: 'Router', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Router>
deployContract(name: 'TestCounter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TestCounter>
deployContract(name: 'IOrderBook', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IOrderBook>
deployContract(name: 'MockERC20', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockERC20>
deployContract(name: 'MockUSDC', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDC>
deployContract(name: 'MockWETH', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockWETH>

  deployContract(name: 'AMMFallback', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.AMMFallback>
deployContract(name: 'MatchingEngine', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MatchingEngine>
deployContract(name: 'OrderBook', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.OrderBook>
deployContract(name: 'Router', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Router>
deployContract(name: 'TestCounter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TestCounter>
deployContract(name: 'IOrderBook', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IOrderBook>
deployContract(name: 'MockERC20', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockERC20>
deployContract(name: 'MockUSDC', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDC>
deployContract(name: 'MockWETH', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockWETH>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  